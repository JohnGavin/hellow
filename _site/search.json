[
  {
    "objectID": "inst/qmd/symlink pins_download_local_board.html",
    "href": "inst/qmd/symlink pins_download_local_board.html",
    "title": "Untitled",
    "section": "",
    "text": "https://pins.rstudio.com/articles/pins-update.html\n\n\npak::pak(\"rstudio/pins-r\")\n\n\nlibrary(pins)\n(bb &lt;- board_url(c(crypto = \"https://raw.githubusercontent.com/Robot-Wealth/r-quant-recipes/master/quantifying-combining-alphas/binance_perp_daily.csv\")))\nbb %&gt;%\n  pin_download(\"crypto\") %&gt;%\n  read.csv(check.names = FALSE) %&gt;%\n  tibble::as_tibble()\n\n\nlibrary(pins)\nc(\"penguins\" = \"https://colorado.rstudio.com/rsc/example_pin/\") %&gt;%\n  board_url() %&gt;%\n  pin_read(\"penguins\")\n\n# Identify the board\nboard &lt;-\n  board_url(c(\"penguins\" = \"https://colorado.rstudio.com/rsc/example_pin/\"))\n# Read the shared data\nboard %&gt;%\n  pin_read(\"penguins\")\n\n\nlibrary(pins)\nboard2 &lt;- board_temp(versioned = TRUE)\nboard2 %&gt;% pin_write(1:5, name = \"x\", type = \"rds\")\nboard2 %&gt;% pin_write(2:6, name = \"x\", type = \"rds\")\nboard2 %&gt;% pin_write(3:7, name = \"x\", type = \"rds\")\n# see all versions\nboard2 %&gt;% pin_versions(\"x\")\n\n\npin_meta()\npin_search()\npin_meta()\npin_delete()\npin_browse()"
  },
  {
    "objectID": "inst/qmd/albert-rapp.de_reactable_groupby.html",
    "href": "inst/qmd/albert-rapp.de_reactable_groupby.html",
    "title": "Untitled",
    "section": "",
    "text": "library(tidyverse)\nlibrary(reactable)\nhawaiian_sales &lt;- gt::pizzaplace |&gt;\n  filter(name == 'hawaiian') |&gt;\n  mutate(\n    month = month(\n      date, label = TRUE, abbr = FALSE,\n      locale = 'en_US.UTF-8' # English month names\n    ),\n    quarter = paste0('Q', quarter(date))\n  ) |&gt;\n  summarise(\n    sales = n(),\n    revenue = sum(price),\n    .by = c(month, quarter)\n  )\nhawaiian_sales\n\n# A tibble: 12 Ã— 4\n   month     quarter sales revenue\n   &lt;ord&gt;     &lt;chr&gt;   &lt;int&gt;   &lt;dbl&gt;\n 1 January   Q1        185   2443.\n 2 February  Q1        198   2633 \n 3 March     Q1        217   2878.\n 4 April     Q2        219   2868.\n 5 May       Q2        198   2688 \n 6 June      Q2        189   2564.\n 7 July      Q3        195   2620.\n 8 August    Q3        201   2679.\n 9 September Q3        196   2616.\n10 October   Q4        188   2515.\n11 November  Q4        227   2953.\n12 December  Q4        209   2817.\n\nreactable(hawaiian_sales)\n\n\n\n\nreactable(\n  hawaiian_sales,\n  columns = list(\n    quarter = colDef(name = 'Quarter'),\n    month = colDef(name = 'Month'),\n    sales = colDef(name = 'Sales'),\n    revenue = colDef(name = 'Revenue')\n  )\n)\nif (!requireNamespace('reactablefmtr'))\n    pak::pak('reactablefmtr')\n\nLoading required namespace: reactablefmtr\n\nlibrary(reactablefmtr)\n\n\nAttaching package: 'reactablefmtr'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\nreactable(\n  hawaiian_sales,\n  columns = list(\n    quarter = colDef(name = 'Quarter'),\n    month = colDef(name = 'Month'),\n    sales = colDef(name = 'Sales'),\n    revenue = colDef(name = 'Revenue')\n  )\n) |&gt;\n  reactablefmtr::add_title(\n    title = 'Hawaiian Pizza Sales in 2015'\n  ) |&gt;\n  reactablefmtr::add_subtitle(\n    subtitle = 'Based on the fake pizzaplace data from `{gt}`',\n    font_weight = 'normal'\n  )\n\nHawaiian Pizza Sales in 2015\nBased on the fake pizzaplace data from `{gt}`"
  },
  {
    "objectID": "inst/qmd/albert-rapp.de_reactable_groupby.html#format-numbers",
    "href": "inst/qmd/albert-rapp.de_reactable_groupby.html#format-numbers",
    "title": "Untitled",
    "section": "Format numbers",
    "text": "Format numbers\n\nreactable(\n  hawaiian_sales,\n  columns = list(\n    quarter = colDef(name = 'Quarter'),\n    month = colDef(name = 'Month'),\n    sales = colDef(name = 'Sales'),\n    revenue = colDef(\n      name = 'Revenue',\n      format = colFormat(currency = 'USD', separators = TRUE)\n    )\n  )\n) |&gt;\n  reactablefmtr::add_title(\n    title = 'Hawaiian Pizza Sales in 2015'\n  ) |&gt;\n  reactablefmtr::add_subtitle(\n    subtitle = 'Based on the fake pizzaplace data from `{gt}`',\n    font_weight = 'normal'\n  )\n\nHawaiian Pizza Sales in 2015\nBased on the fake pizzaplace data from `{gt}`"
  },
  {
    "objectID": "inst/qmd/albert-rapp.de_reactable_groupby.html#add-groupshttpsalbert-rapp.deposts28_reactable_intro28_reactable_intro.htmladd-groups",
    "href": "inst/qmd/albert-rapp.de_reactable_groupby.html#add-groupshttpsalbert-rapp.deposts28_reactable_intro28_reactable_intro.htmladd-groups",
    "title": "Untitled",
    "section": "(Add groups)[https://albert-rapp.de/posts/28_reactable_intro/28_reactable_intro.html#add-groups]",
    "text": "(Add groups)[https://albert-rapp.de/posts/28_reactable_intro/28_reactable_intro.html#add-groups]\n\nreactable(\n  hawaiian_sales,\n  groupBy = 'quarter',\n  columns = list(\n    quarter = colDef(name = 'Quarter'),\n    month = colDef(name = 'Month'),\n    sales = colDef(name = 'Sales'),\n    revenue = colDef(\n      name = 'Revenue',\n      format = colFormat(currency = 'USD', separators = TRUE)\n    )\n  )\n) |&gt;\n  reactablefmtr::add_title(\n    title = 'Hawaiian Pizza Sales in 2015'\n  ) |&gt;\n  reactablefmtr::add_subtitle(\n    subtitle = 'Based on the fake pizzaplace data from `{gt}`',\n    font_weight = 'normal'\n  )\n\nHawaiian Pizza Sales in 2015\nBased on the fake pizzaplace data from `{gt}`"
  },
  {
    "objectID": "inst/qmd/albert-rapp.de_reactable_groupby.html#add-summarieshttpsalbert-rapp.deposts28_reactable_intro28_reactable_intro.htmladd-groups",
    "href": "inst/qmd/albert-rapp.de_reactable_groupby.html#add-summarieshttpsalbert-rapp.deposts28_reactable_intro28_reactable_intro.htmladd-groups",
    "title": "Untitled",
    "section": "(Add summaries)[https://albert-rapp.de/posts/28_reactable_intro/28_reactable_intro.html#add-groups]",
    "text": "(Add summaries)[https://albert-rapp.de/posts/28_reactable_intro/28_reactable_intro.html#add-groups]\n\nreactable(\n  hawaiian_sales,\n  groupBy = \"quarter\",\n  columns = list(\n    quarter = colDef(name = \"Quarter\"),\n    month = colDef(name = \"Month\"),\n    sales = colDef(\n      name = \"Sales\",\n      aggregate = \"sum\"\n    ),\n    revenue = colDef(\n      name = \"Revenue\",\n      format = colFormat(currency = \"USD\", separators = TRUE),\n      aggregate = \"sum\"\n    )\n  )\n) |&gt;\n  reactablefmtr::add_title(\n    title = \"Hawaiian Pizza Sales in 2015\"\n  ) |&gt;\n  reactablefmtr::add_subtitle(\n    subtitle = \"Based on the fake pizzaplace data from `{gt}`\",\n    font_weight = \"normal\"\n  )\n\nHawaiian Pizza Sales in 2015\nBased on the fake pizzaplace data from `{gt}`"
  },
  {
    "objectID": "inst/qmd/albert-rapp.de_reactable_groupby.html#make-table-searchable",
    "href": "inst/qmd/albert-rapp.de_reactable_groupby.html#make-table-searchable",
    "title": "Untitled",
    "section": "Make table searchable",
    "text": "Make table searchable\n\nreactable(\n  hawaiian_sales,\n  groupBy = \"quarter\",\n  defaultExpanded = TRUE, # Expand rows by default\n  columns = list(\n    quarter = colDef(name = \"Quarter\"),\n    month = colDef(\n      name = \"Month\",\n      filterable = TRUE # Make column filterable\n    ),\n    sales = colDef(\n      name = \"Sales\",\n      aggregate = \"sum\"\n    ),\n    revenue = colDef(\n      name = \"Revenue\",\n      format = colFormat(currency = \"USD\", separators = TRUE),\n      aggregate = \"sum\"\n    )\n  )\n) |&gt;\n  reactablefmtr::add_title(\n    title = \"Hawaiian Pizza Sales in 2015\"\n  ) |&gt;\n  reactablefmtr::add_subtitle(\n    subtitle = \"Based on the fake pizzaplace data from `{gt}`\",\n    font_weight = \"normal\"\n  )\n\nHawaiian Pizza Sales in 2015\nBased on the fake pizzaplace data from `{gt}`"
  },
  {
    "objectID": "inst/qmd/albert-rapp.de_reactable_groupby.html#add-a-total-footerheader",
    "href": "inst/qmd/albert-rapp.de_reactable_groupby.html#add-a-total-footerheader",
    "title": "Untitled",
    "section": "Add a total footer/header",
    "text": "Add a total footer/header\n\nreactable(\n  hawaiian_sales,\n  groupBy = \"quarter\",\n  defaultExpanded = FALSE,\n  columns = list(\n    quarter = colDef(name = \"Quarter\"),\n    month = colDef(\n      name = \"Month\",\n      filterable = TRUE\n    ),\n    sales = colDef(\n      name = \"Sales\",\n      aggregate = \"sum\",\n      footer = function(values, name) {\n        sum(values)\n      }\n    ),\n    revenue = colDef(\n      name = \"Revenue\",\n      format = colFormat(currency = \"USD\", separators = TRUE),\n      aggregate = \"sum\",\n      footer = function(values, name) {\n        sum(values) |&gt; scales::dollar()\n      }\n    )\n  )\n) |&gt;\n  reactablefmtr::add_title(\n    title = \"Hawaiian Pizza Sales in 2015\"\n  ) |&gt;\n  reactablefmtr::add_subtitle(\n    subtitle = \"Based on the fake pizzaplace data from `{gt}`\",\n    font_weight = \"normal\"\n  )\n\nHawaiian Pizza Sales in 2015\nBased on the fake pizzaplace data from `{gt}`\n\n\n\n\n\nreactable(\n  hawaiian_sales,\n  groupBy = \"quarter\",\n  defaultExpanded = TRUE,\n  columns = list(\n    quarter = colDef(name = \"Quarter\"),\n    month = colDef(\n      name = \"Month\",\n      filterable = TRUE\n    ),\n    sales = colDef(\n      name = \"Sales\",\n      aggregate = \"sum\",\n      # or header but overwrite column name?\n      footer = JS(\"function(column, state) {\n        let total = 0\n        state.sortedData.forEach(function(row) {\n          total += row[column.id]\n        })\n        return total\n      }\"),\n    ),\n    revenue = colDef(\n      name = \"Revenue\",\n      format = colFormat(currency = \"USD\", separators = TRUE),\n      aggregate = \"sum\",\n      footer = JS(\"function(column, state) {\n        let total = 0\n        state.sortedData.forEach(function(row) {\n          total += row[column.id]\n        })\n        return total.toLocaleString('en-US', { style: 'currency', currency: 'USD' })\n      }\")\n    )\n  )\n) |&gt;\n  reactablefmtr::add_title(\n    title = \"Hawaiian Pizza Sales in 2015\"\n  ) |&gt;\n  reactablefmtr::add_subtitle(\n    subtitle = \"Based on the fake pizzaplace data from `{gt}`\",\n    font_weight = \"normal\"\n  )\n\nHawaiian Pizza Sales in 2015\nBased on the fake pizzaplace data from `{gt}`"
  },
  {
    "objectID": "inst/qmd/python_install_3.12_reticulate_gemeni_llm.html",
    "href": "inst/qmd/python_install_3.12_reticulate_gemeni_llm.html",
    "title": "Untitled",
    "section": "",
    "text": "library(tidyverse)\nlibrary(reticulate)\n\n# install Python, using pyenv\ninstall_python(\n  # latest patch via python.org\n  # 3.12.5 Aug 24\n  version = \"3.12:latest\",\n  list = FALSE,\n  force = FALSE,\n  optimized = TRUE\n)\n\n# 1: virtual env - a best practice.\n# conda create -n gemini python=3.12\n# ls ~/.virtualenvs/\n# python3.12 -m venv ~/.virtualenvs/gemini\n# source ~/.virtualenvs/gemini/bin/activate\n# pip3 install google-generativeai langchain langchain-community pypdf python-dotenv\n# manually installed python; manually get path\npy_vers &lt;- \"/opt/homebrew/Caskroom/miniconda/base/envs/gemini/bin/python\"\n# 3.12.5 v 3.12.4?!\nuse_python(py_vers, required = TRUE)\npy_config()\n\n\nvirtualenv_create(\n  envname = \"gemini\",\n  version = \"3.12:latest\"\n)\nuse_condaenv(\"gemini\", required = TRUE)\n# /Users/johngavin/.virtualenvs/gemini/bin/python3.12\n# use_miniconda(\n#     condaenv = \"gemini\",\n#     required = TRUE)\n# use_virtualenv(\"gemini\", required = TRUE))\n\n\npy_install(c(\"google-generativeai\", \"langchain\", \"langchain-community\", \"pypdf\", \"python-dotenv\"), pip = T, virtualenv = \"gemini\")\n\n# Step 2: Use the virtual environment\n# use_virtualenv(\"gemini\")\n\n# Step 3: Import installed modules\ndotenv &lt;- import(\"dotenv\"\nlangchain_community &lt;- import(\"langchain_community\")\nPyPDFLoader &lt;- langchain_community$document_loaders$PyPDFLoader\nlangchain &lt;- import(\"langchain\")\nPromptTemplate &lt;- langchain$prompts$PromptTemplate\ngenai &lt;- import(\"google.generativeai\")\n# genai &lt;- import(\"google-generativeai\")\n# genai &lt;- import(\"google_generativeai\")\n\n# Step 4: Load your API keys onto a .env file - see https://pypi.org/project/python-dotenv/\ndotenv$load_dotenv(dotenv_path = \".env\", verbose = TRUE)\n\n\n# Step 5: Load PDF of interest\nfp &lt;- file.path(\n  \"~/Downloads\",\n  \"Profitable Day Trading Strategy For The U.S. Equity.pdf\"\n)\nloader &lt;- PyPDFLoader(fp)\ndocuments &lt;- loader$load()\n\n# Step 6: Setup Gemini\ngenai$configure() # if you're skipping dotenv, insert your API key here\n\n\nllm &lt;- genai$GenerativeModel(\n  \"gemini-1.5-flash\",\n  generation_config = genai$GenerationConfig(\n    max_output_tokens = 2000L,\n    temperature = 0\n  )\n)\n\n\n# Step 7 (optional): Test\n# FAIL Gemini API free tier is not available in your country.\nllm$generate_content(contents = \"hello\")\n\n\n# Step 8: Prompt\nprompt_text &lt;- \"\nYou are a question and answer assistant. Given the context below, answer the question.\n\nContext: {text}\n\nQuestion: {question}\n\"\n\nprompt &lt;- PromptTemplate(template = prompt_text, input_variables = list(\"text\", \"question\"))\n\nquestions &lt;- c(\n  \"What is the preferred treatment of CRE?\",\n  \"What is the preferred treatment of ESBL-E?\",\n  \"Can we use fosfomycin in ESBL Klebsiella?\",\n  \"Can we use fosfomycin in ESBL Ecoli?\",\n  \"What is the preferred treatment of stenotrophomonas?\",\n  \"What is the preferred treatment of DTR Pseudomonas?\",\n  \"Which organisms require two active agent when susceptibility is known?\",\n  \"Can we use gentamicin in pseudomonas infection?\",\n  \"Can we use tobramycin to treat pseudomonas infection?\",\n  \"Why is there carbapenemase non-producing organism?\",\n  \"Can we use oral antibiotics for any of these MDRO?\",\n  \"What is the preferred treatment of MRSA?\",\n  \"What is the preferred treatment of CRAB?\",\n  \"Can fosofmycin be used for pyelonephritis?\",\n  \"Is IV antibiotics better than oral antibiotics?\"\n)\n\ncontent &lt;- prompt$format(\n  text = documents,\n  question = questions\n)\n\n\n# Step 9: Generate Content / aka Langchain lingo == invoke\nresponse &lt;- llm$generate_content(contents = content)\n\n\n# Step 10: Let's simulate a streaming response ðŸ¤ª\nprint_keystrokes &lt;- function(text) {\n  for (char in strsplit(text, \"\")[[1]]) {\n    cat(char) # Print the character\n    Sys.sleep(0.005) # Optional delay for visual effect\n  }\n  cat(\"\\n\") # Add a newline at the end\n}\n\nprint_keystrokes(response$text)"
  }
]